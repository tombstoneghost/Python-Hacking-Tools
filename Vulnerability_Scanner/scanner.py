# Imports
import requests
import re
import urllib.parse
from bs4 import BeautifulSoup


# Scanner Class
class Scanner:
    def __init__(self, url, ignore_links):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links

    # Extracting all links in a URL
    @staticmethod
    def extract_links_from(url):
        res = requests.get(url)
        # noinspection PyTypeChecker
        return re.findall('(?:href=")(.*)"', res.content.decode(errors="ignore"))

    print("\nDiscovering all links in the target page [Crawling]\n")

    # Crawling
    def crawl(self, url=None):
        if url is None:
            url = self.target_url
        else:
            href_links = self.extract_links_from(url)

            for link in href_links:
                link = urllib.parse.urljoin(url, link)

                if "#" in link:
                    link = link.split("#")[0]

                if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                    self.target_links.append(link)
                    print(link)
                    self.crawl(link)

    # Extracting Forms
    def extract_forms(self, url):
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content)
        return parsed_html.findAll('form')

    # Auto-Submitting Forms
    def submit_form(self, form, value, url):
        action = form.get("action")
        post_url = urllib.parse.urljoin(url, action)
        method = form.get("method")

        input_list = form.findAll("input")
        post_data = {}

        for input_tag in input_list:
            input_name = input_tag.get("name")
            input_type = input_tag.get("type")
            input_value = input_tag.get("value")

            if input_type == 'text':
                input_value = value

            post_data[input_name] = input_value
        if method == 'post':
            return self.session.post(post_url, data=post_data)

        return requests.post(post_data, data=post_data)

    # Running Scanner
    def run_scanner(self):
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                print("[+] Testing form in " + link)
                is_vulnerable_to_xss = self.test_xss_in_form(form, link)
                if is_vulnerable_to_xss:
                    print("\n\n[***] XSS discovered in " + link + " in the following form")
                    print(form)

            if "=" in link:
                print("\n\n[+] Testing " + link)
                is_vulnerable_to_xss = self.test_xss_in_link(link)
                if is_vulnerable_to_xss:
                    print("[***] Discovered XSS in " + link)

    # Testing XSS Vulnerability in URL
    def test_xss_in_link(self, url):
        xss_test_script = "<script>alert('Hacked')</script>"
        url = url.replace("=", "=" + xss_test_script)
        response = self.session.get(url)

        return xss_test_script.encode() in response.content

    # Testing XSS Vulnerability in Form
    def test_xss_in_form(self, form, url):
        xss_test_script = "<script>alert('Hacked')</script>"
        response = self.submit_form(form, xss_test_script, url)

        return xss_test_script.encode() in response.content
